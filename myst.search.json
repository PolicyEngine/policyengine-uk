{"version":"1","records":[{"hierarchy":{"lvl1":"Economic assumptions"},"type":"lvl1","url":"/growthfactors","position":0},{"hierarchy":{"lvl1":"Economic assumptions"},"content":"We project economic variables using year-over-year growth rates stored in parameters/gov/economic_assumptions/yoy_growth.yaml. We generate index values from these rates to update household variables. We source all values from the OBR’s Economic and Fiscal Outlook (\n\nMarch 2025) unless we specify otherwise.","type":"content","url":"/growthfactors","position":1},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Consumer price index"},"type":"lvl2","url":"/growthfactors#consumer-price-index","position":2},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Consumer price index"},"content":"We use the OBR’s CPI projections to drive most benefit and consumption variables.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n10.0%\n\n5.7%\n\n2.3%\n\n3.2%\n\n1.9%\n\n2.0%\n\n2.0%\n\n2.0%\n\nWe apply CPI to these variables:\n\nAll reported benefits– attendance_allowance_reported, carers_allowance_reported, child_benefit_reported, child_tax_credit_reported, dla_m_reported, dla_sc_reported, esa_contrib_reported, esa_income_reported, housing_benefit_reported, iidb_reported, incapacity_benefit_reported, income_support_reported, jsa_contrib_reported, jsa_income_reported, maternity_allowance_reported, pension_credit_reported, pip_dl_reported, pip_m_reported, sda_reported, state_pension_reported, universal_credit_reported, winter_fuel_allowance_reported, working_tax_credit_reported\n\nAll consumption categories– alcohol_and_tobacco_consumption, clothing_and_footwear_consumption, communication_consumption, domestic_energy_consumption, education_consumption, food_and_non_alcoholic_beverages_consumption, health_consumption, household_furnishings_consumption, housing_water_and_electricity_consumption, miscellaneous_consumption, recreation_consumption, restaurants_and_hotels_consumption, transport_consumption\n\nOther variables– afcs_reported, bsp_reported, childcare_expenses, diesel_spending, free_school_fruit_veg, free_school_meals, free_school_milk, maintenance_expenses, petrol_spending, statutory_maternity_pay, statutory_paternity_pay, statutory_sick_pay, state_pension","type":"content","url":"/growthfactors#consumer-price-index","position":3},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Average earnings"},"type":"lvl2","url":"/growthfactors#average-earnings","position":4},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Average earnings"},"content":"We apply the OBR’s wage growth forecasts to employment-related variables.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n6.4%\n\n6.9%\n\n4.7%\n\n3.7%\n\n2.2%\n\n2.1%\n\n2.3%\n\n2.5%\n\nWe use average earnings for these variables: employee_pension_contributions, employer_pension_contributions, employment_income, employment_income_before_lsr, personal_pension_contributions, student_loan_repayments","type":"content","url":"/growthfactors#average-earnings","position":5},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Lagged average earnings"},"type":"lvl2","url":"/growthfactors#lagged-average-earnings","position":6},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Lagged average earnings"},"content":"We lag earnings growth by one year and use that to uprate housing service charges (including ground rent).\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n5.9%\n\n6.4%\n\n6.9%\n\n4.7%\n\n3.7%\n\n2.2%\n\n2.1%\n\n2.3%","type":"content","url":"/growthfactors#lagged-average-earnings","position":7},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Per capita GDP"},"type":"lvl2","url":"/growthfactors#per-capita-gdp","position":8},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Per capita GDP"},"content":"We derive these rates from OBR GDP growth and ONS population projections.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n9.2%\n\n5.0%\n\n3.8%\n\n2.8%\n\n2.8%\n\n3.1%\n\n3.3%\n\n3.3%\n\nWe use per capita GDP for these variables: capital_gains, capital_gains_before_response, corporate_wealth, dividend_income, gross_financial_wealth, lump_sum_income, main_residence_value, maintenance_income, miscellaneous_income, mortgage_capital_repayment, net_financial_wealth, non_residential_property_value, other_investment_income, other_residential_property_value, owned_land, pension_income, private_transfer_income, property_income, savings, savings_interest_income, sublet_income","type":"content","url":"/growthfactors#per-capita-gdp","position":9},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Council tax"},"type":"lvl2","url":"/growthfactors#council-tax","position":10},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Council tax"},"content":"We use the OBR’s Council Tax receipts and projections.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n5.3%\n\n5.6%\n\n6.4%\n\n4.6%\n\n4.5%\n\n4.6%\n\n4.5%\n\n4.5%\n\nWe apply this to: council_tax","type":"content","url":"/growthfactors#council-tax","position":11},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Mortgage interest"},"type":"lvl2","url":"/growthfactors#mortgage-interest","position":12},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Mortgage interest"},"content":"We use the OBR’s mortgage interest rate index growth rates.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n26.2%\n\n48.5%\n\n22.1%\n\n13.6%\n\n12.6%\n\n8.2%\n\n4.2%\n\n4.7%\n\nWe apply this to: mortgage_interest_repayment","type":"content","url":"/growthfactors#mortgage-interest","position":13},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Private pension index"},"type":"lvl2","url":"/growthfactors#private-pension-index","position":14},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Private pension index"},"content":"We use RPI year-on-year change from the previous year, capped at 5%.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n5.0%\n\n5.0%\n\n5.0%\n\n4.7%\n\n3.7%\n\n2.2%\n\n2.1%\n\n2.3%\n\nWe apply this to: private_pension_income","type":"content","url":"/growthfactors#private-pension-index","position":15},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Rent"},"type":"lvl2","url":"/growthfactors#rent","position":16},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Rent"},"content":"We use the OBR’s rental growth projections.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n4.0%\n\n6.3%\n\n7.4%\n\n5.7%\n\n3.6%\n\n2.7%\n\n2.3%\n\n2.4%\n\nWe apply this to: rent","type":"content","url":"/growthfactors#rent","position":17},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Per capita mixed income"},"type":"lvl2","url":"/growthfactors#per-capita-mixed-income","position":18},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Per capita mixed income"},"content":"We derive these rates from OBR mixed income growth and ONS population projections.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n6.3%\n\n2.4%\n\n4.8%\n\n4.7%\n\n3.1%\n\n3.1%\n\n3.6%\n\n3.8%\n\nWe apply this to: self_employment_income","type":"content","url":"/growthfactors#per-capita-mixed-income","position":19},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Population"},"type":"lvl2","url":"/growthfactors#population","position":20},{"hierarchy":{"lvl1":"Economic assumptions","lvl2":"Population"},"content":"We use ONS population \n\nprojections.\n\nFiscal year\n\n2022\n\n2023\n\n2024\n\n2025\n\n2026\n\n2027\n\n2028\n\n2029\n\nGrowth rate\n\n0.3%\n\n1.4%\n\n1.0%\n\n1.1%\n\n0.7%\n\n0.8%\n\n0.4%\n\n0.5%\n\nWe apply this to: household_weight","type":"content","url":"/growthfactors#population","position":21},{"hierarchy":{"lvl1":"Water bills projection and uprating"},"type":"lvl1","url":"/water-bills","position":0},{"hierarchy":{"lvl1":"Water bills projection and uprating"},"content":"This documentation describes the water bills projection and uprating methodology used in PolicyEngine UK.","type":"content","url":"/water-bills","position":1},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl2":"Overview"},"type":"lvl2","url":"/water-bills#overview","position":2},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl2":"Overview"},"content":"We implement water bills projections through a combination of historical data analysis and regulatory projection data. The system uses:\n\nHistorical data (2021-2025) from Ofwat average bills\n\nRegulatory projection data from Ofwat company-specific increases (2025-2030)\n\nEconomic uprating using Consumer Price Index (CPIH) growth rates","type":"content","url":"/water-bills#overview","position":3},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl2":"Implementation"},"type":"lvl2","url":"/water-bills#implementation","position":4},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl2":"Implementation"},"content":"","type":"content","url":"/water-bills#implementation","position":5},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Data sources","lvl2":"Implementation"},"type":"lvl3","url":"/water-bills#data-sources","position":6},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Data sources","lvl2":"Implementation"},"content":"","type":"content","url":"/water-bills#data-sources","position":7},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Historical data","lvl3":"Data sources","lvl2":"Implementation"},"type":"lvl4","url":"/water-bills#historical-data","position":8},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Historical data","lvl3":"Data sources","lvl2":"Implementation"},"content":"The projection uses historical real water bills data from Ofwat:\n\n2021: £486 (real terms)\n\n2022: £470 (real terms)\n\n2023: £486 (real terms)\n\n2024: £492 (real terms)\n\n2025: £503 (real terms)\n\nData source: \n\nOfwat average bills data for England and Wales","type":"content","url":"/water-bills#historical-data","position":9},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Regulatory projections","lvl3":"Data sources","lvl2":"Implementation"},"type":"lvl4","url":"/water-bills#regulatory-projections","position":10},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Regulatory projections","lvl3":"Data sources","lvl2":"Implementation"},"content":"We source company-specific water bill increases from the Consumer Council for Water (CCW) based on Ofwat’s price review data for 2025-2030. The data includes projected bills for 16 water companies covering both water and sewerage services.\n\nData source: \n\nCCW Water Company Bill Increases 2025-30","type":"content","url":"/water-bills#regulatory-projections","position":11},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Projection methodology","lvl2":"Implementation"},"type":"lvl3","url":"/water-bills#projection-methodology","position":12},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Projection methodology","lvl2":"Implementation"},"content":"","type":"content","url":"/water-bills#projection-methodology","position":13},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Historical period (2021-2025)","lvl3":"Projection methodology","lvl2":"Implementation"},"type":"lvl4","url":"/water-bills#historical-period-2021-2025","position":14},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Historical period (2021-2025)","lvl3":"Projection methodology","lvl2":"Implementation"},"content":"We convert real bills to nominal terms using CPIH values\n\nWe calculate year-on-year nominal growth rates\n\nWe normalize to 2021 baseline (index = 100)","type":"content","url":"/water-bills#historical-period-2021-2025","position":15},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Future period (2025-2030)","lvl3":"Projection methodology","lvl2":"Implementation"},"type":"lvl4","url":"/water-bills#future-period-2025-2030","position":16},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Future period (2025-2030)","lvl3":"Projection methodology","lvl2":"Implementation"},"content":"We calculate average of company-specific projected increases\n\nWe apply Consumer Price Index (CPIH) uprating to account for inflation\n\nWe compound inflation adjustments year-over-year\n\nThe methodology ensures that:\n\nWe preserve real increases from regulatory decisions\n\nWe apply additional inflation adjustments using CPIH forecasts\n\nFuture projections account for both policy changes and economic conditions","type":"content","url":"/water-bills#future-period-2025-2030","position":17},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Code structure","lvl2":"Implementation"},"type":"lvl3","url":"/water-bills#code-structure","position":18},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Code structure","lvl2":"Implementation"},"content":"","type":"content","url":"/water-bills#code-structure","position":19},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Core implementation","lvl3":"Code structure","lvl2":"Implementation"},"type":"lvl4","url":"/water-bills#core-implementation","position":20},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Core implementation","lvl3":"Code structure","lvl2":"Implementation"},"content":"Location: policyengine_uk/utils/water/forecast_water_bills.py\n\nFunction: project_water_bills()\n\nData: policyengine_uk/utils/water/ofwat_increases.csv","type":"content","url":"/water-bills#core-implementation","position":21},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Parameters integration","lvl3":"Code structure","lvl2":"Implementation"},"type":"lvl4","url":"/water-bills#parameters-integration","position":22},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl4":"Parameters integration","lvl3":"Code structure","lvl2":"Implementation"},"content":"We store water bills year-on-year growth rates in:\n\nLocation: policyengine_uk/parameters/gov/economic_assumptions/yoy_growth.yaml\n\nParameter: ofwat.water_bills","type":"content","url":"/water-bills#parameters-integration","position":23},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Growth rates","lvl2":"Implementation"},"type":"lvl3","url":"/water-bills#growth-rates","position":24},{"hierarchy":{"lvl1":"Water bills projection and uprating","lvl3":"Growth rates","lvl2":"Implementation"},"content":"The model uses these resulting year-on-year growth rates:\n\nYear\n\nGrowth rate\n\n2022\n\n5.2%\n\n2023\n\n9.2%\n\n2024\n\n4.4%\n\n2025\n\n6.1%\n\n2026\n\n6.1%\n\n2027\n\n5.1%\n\n2028\n\n3.8%\n\n2029\n\n4.3%","type":"content","url":"/water-bills#growth-rates","position":25},{"hierarchy":{"lvl1":"PolicyEngine-UK"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"PolicyEngine-UK"},"content":"This book contains an introduction to using PolicyEngine-UK to model UK taxes and benefits. It is currently a work in progress and may be added to. PolicyEngine-UK is a microsimulation model of the UK tax and benefit system: it is a model which calculates variable values over UK entities from given policy parameters and structures. In practice, this gives it two main uses: calculating statistics under current tax and benefit law, and simulating effects of potential new changes to the legislation.\n\nWe’re grateful to the \n\nUKMOD team for publishing descriptions of their model; our ability to reference these descriptions accelerated OpenFisca UK’s development. UKMOD is maintained, developed and managed by the Centre for Microsimulation and Policy Analysis at the Institute for Social and Economic Research (ISER), University of Essex.\n\nCode examples and outputs are re-run automatically on each new version of PolicyEngine-UK.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"PolicyEngine-UK","lvl2":"Short demo"},"type":"lvl2","url":"/#short-demo","position":2},{"hierarchy":{"lvl1":"PolicyEngine-UK","lvl2":"Short demo"},"content":"","type":"content","url":"/#short-demo","position":3},{"hierarchy":{"lvl1":"PolicyEngine-UK","lvl3":"Baseline estimation","lvl2":"Short demo"},"type":"lvl3","url":"/#baseline-estimation","position":4},{"hierarchy":{"lvl1":"PolicyEngine-UK","lvl3":"Baseline estimation","lvl2":"Short demo"},"content":"Calculating, for example, the total Income Tax liability by region can be done with the following code:\n\nfrom policyengine_uk import Microsimulation\nimport pandas as pd\n\nENHANCED_FRS = \"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\"\n\nsim = Microsimulation(dataset=ENHANCED_FRS)\n\ndf = sim.calculate_dataframe(\n    [\n        \"household_id\",  # If the first variable is household level, the dataframe will project everything to households. Same for people.\n        \"income_tax\",\n        \"region\",\n    ],\n    period=2025,\n)\n\ndf.groupby(\"region\").income_tax.sum().sort_values(\n    ascending=False\n) / 1e9  # Weights automatically applied\n\n","type":"content","url":"/#baseline-estimation","position":5},{"hierarchy":{"lvl1":"PolicyEngine-UK","lvl3":"Reform evaluation","lvl2":"Short demo"},"type":"lvl3","url":"/#reform-evaluation","position":6},{"hierarchy":{"lvl1":"PolicyEngine-UK","lvl3":"Reform evaluation","lvl2":"Short demo"},"content":"Below is an example of simulating the effects of a reform (namely, increasing the basic rate of income tax from 20% to 23%).\n\nfrom policyengine_uk.model_api import *\n\n\ndef change_tax_parameters(parameters):\n    parameters.gov.hmrc.income_tax.rates.uk.brackets[0].rate.update(\n        period=periods.period(\"year:2019:10\"), value=0.23\n    )\n    return parameters\n\n\nclass reform(Reform):\n    def apply(self):\n        self.modify_parameters(change_tax_parameters)\n\n\nbaseline = Microsimulation(dataset=ENHANCED_FRS)\nreformed = Microsimulation(dataset=ENHANCED_FRS, reform=reform)\nrevenue = (\n    reformed.calculate(\"gov_balance\", 2025).sum()\n    - baseline.calc(\"gov_balance\", 2025).sum()\n)\nf\"Revenue: £{round(revenue / 1e9, 1)}bn\"","type":"content","url":"/#reform-evaluation","position":7},{"hierarchy":{"lvl1":"Model baseline"},"type":"lvl1","url":"/model-baseline","position":0},{"hierarchy":{"lvl1":"Model baseline"},"content":"PolicyEngine UK models the UK tax and benefit system as of 2025, incorporating major reforms from 2020-2025. This page documents the key policy changes by year, working backwards from 2025, showing how each reform is implemented in the codebase.","type":"content","url":"/model-baseline","position":1},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2025 reforms"},"type":"lvl2","url":"/model-baseline#id-2025-reforms","position":2},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2025 reforms"},"content":"","type":"content","url":"/model-baseline#id-2025-reforms","position":3},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Budget 2024","lvl2":"2025 reforms"},"type":"lvl3","url":"/model-baseline#autumn-budget-2024","position":4},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Budget 2024","lvl2":"2025 reforms"},"content":"The government increased the \n\nemployer National Insurance rate from 13.8% to 15% and reduced the \n\nemployer secondary threshold from £9,100 to £5,000 annually, both taking effect in fiscal year 2025-26.","type":"content","url":"/model-baseline#autumn-budget-2024","position":5},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Universal Credit rebalancing","lvl2":"2025 reforms"},"type":"lvl3","url":"/model-baseline#universal-credit-rebalancing","position":6},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Universal Credit rebalancing","lvl2":"2025 reforms"},"content":"Parliament passed legislation to implement Universal Credit rebalancing reforms, with the \n\nrebalancing switch activated in fiscal year 2025-26. The reforms include \n\ngraduated standard allowance uplifts above inflation: 2.3% in 2026-27, 3.1% in 2027-28, 4.0% in 2028-29, and 4.8% in 2029-30. A \n\nnew health element of £217.26 will be introduced for new claimants in fiscal year 2026-27.","type":"content","url":"/model-baseline#universal-credit-rebalancing","position":7},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Benefit uprating","lvl2":"2025 reforms"},"type":"lvl3","url":"/model-baseline#benefit-uprating","position":8},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Benefit uprating","lvl2":"2025 reforms"},"content":"Annual benefit uprating applied 4.1% increases to state pensions and 1.7% to working-age benefits, implemented through the \n\nstandard uprating mechanism.","type":"content","url":"/model-baseline#benefit-uprating","position":9},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2024 reforms"},"type":"lvl2","url":"/model-baseline#id-2024-reforms","position":10},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2024 reforms"},"content":"","type":"content","url":"/model-baseline#id-2024-reforms","position":11},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Statement 2023","lvl2":"2024 reforms"},"type":"lvl3","url":"/model-baseline#autumn-statement-2023","position":12},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Statement 2023","lvl2":"2024 reforms"},"content":"The government announced further National Insurance cuts, reducing the \n\nemployee main rate from 10% to 8% and the \n\nself-employed Class 4 rate from 9% to 6% in fiscal year 2024-25. \n\nClass 2 National Insurance contributions were abolished for self-employed people, with the flat rate set to £0 in fiscal year 2024-25.","type":"content","url":"/model-baseline#autumn-statement-2023","position":13},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Capital gains tax changes (Autumn Budget 2024)","lvl2":"2024 reforms"},"type":"lvl3","url":"/model-baseline#capital-gains-tax-changes-autumn-budget-2024","position":14},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Capital gains tax changes (Autumn Budget 2024)","lvl2":"2024 reforms"},"content":"The government increased capital gains tax rates from 10%/20% to \n\n18% for basic rate taxpayers and \n\n24% for higher rate taxpayers in fiscal year 2025-26.","type":"content","url":"/model-baseline#capital-gains-tax-changes-autumn-budget-2024","position":15},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Spring Budget 2024","lvl2":"2024 reforms"},"type":"lvl3","url":"/model-baseline#spring-budget-2024","position":16},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Spring Budget 2024","lvl2":"2024 reforms"},"content":"The government increased the \n\nchild benefit high income tax charge threshold from £50,000 to £60,000 in fiscal year 2024-25.","type":"content","url":"/model-baseline#spring-budget-2024","position":17},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Statement 2023 (Employee NI cut)","lvl2":"2024 reforms"},"type":"lvl3","url":"/model-baseline#autumn-statement-2023-employee-ni-cut","position":18},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Statement 2023 (Employee NI cut)","lvl2":"2024 reforms"},"content":"An initial National Insurance cut reduced the \n\nemployee main rate from 12% to 10% in fiscal year 2024-25.","type":"content","url":"/model-baseline#autumn-statement-2023-employee-ni-cut","position":19},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2023 reforms"},"type":"lvl2","url":"/model-baseline#id-2023-reforms","position":20},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2023 reforms"},"content":"","type":"content","url":"/model-baseline#id-2023-reforms","position":21},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Statement 2022","lvl2":"2023 reforms"},"type":"lvl3","url":"/model-baseline#autumn-statement-2022","position":22},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Statement 2022","lvl2":"2023 reforms"},"content":"The government reduced the \n\nadditional rate income tax threshold from £150,000 to £125,140, taking effect in fiscal year 2023-24. The government also began reducing the \n\ncapital gains tax annual exempt amount from £12,300 to £6,000 in fiscal year 2023-24, with a further reduction to \n\n£3,000 in fiscal year 2024-25.","type":"content","url":"/model-baseline#autumn-statement-2022","position":23},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2022 reforms"},"type":"lvl2","url":"/model-baseline#id-2022-reforms","position":24},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2022 reforms"},"content":"","type":"content","url":"/model-baseline#id-2022-reforms","position":25},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Spring Statement 2022","lvl2":"2022 reforms"},"type":"lvl3","url":"/model-baseline#spring-statement-2022","position":26},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Spring Statement 2022","lvl2":"2022 reforms"},"content":"The government announced an increase in the \n\nNational Insurance primary threshold from £9,880 to £12,570, aligning it with the personal allowance in fiscal year 2022-23.","type":"content","url":"/model-baseline#spring-statement-2022","position":27},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Budget 2021 (Health and Social Care Levy)","lvl2":"2022 reforms"},"type":"lvl3","url":"/model-baseline#autumn-budget-2021-health-and-social-care-levy","position":28},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Budget 2021 (Health and Social Care Levy)","lvl2":"2022 reforms"},"content":"The government temporarily increased \n\nNational Insurance rates by 1.25 percentage points in fiscal year 2022-23, later reversed the same fiscal year.","type":"content","url":"/model-baseline#autumn-budget-2021-health-and-social-care-levy","position":29},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Mini-Budget 2022 (September)","lvl2":"2022 reforms"},"type":"lvl3","url":"/model-baseline#mini-budget-2022-september","position":30},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Mini-Budget 2022 (September)","lvl2":"2022 reforms"},"content":"The government announced increases to \n\nstamp duty nil rate thresholds, raising the main threshold from £125,000 to £250,000 and the first-time buyer threshold to £425,000.","type":"content","url":"/model-baseline#mini-budget-2022-september","position":31},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Cost of living support","lvl2":"2022 reforms"},"type":"lvl3","url":"/model-baseline#cost-of-living-support","position":32},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Cost of living support","lvl2":"2022 reforms"},"content":"The government announced cost of living payments: \n\n£650 for means-tested benefit recipients, \n\n£300 for pensioners, and \n\n£150 for disability benefit recipients, implemented through dedicated \n\npayment calculation variables.","type":"content","url":"/model-baseline#cost-of-living-support","position":33},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Energy Price Guarantee","lvl2":"2022 reforms"},"type":"lvl3","url":"/model-baseline#energy-price-guarantee","position":34},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Energy Price Guarantee","lvl2":"2022 reforms"},"content":"Following the energy crisis, the government introduced an \n\nEnergy Price Guarantee capping typical household bills at £2,500 in fiscal year 2022-23.","type":"content","url":"/model-baseline#energy-price-guarantee","position":35},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2021 reforms"},"type":"lvl2","url":"/model-baseline#id-2021-reforms","position":36},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2021 reforms"},"content":"","type":"content","url":"/model-baseline#id-2021-reforms","position":37},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Budget 2021","lvl2":"2021 reforms"},"type":"lvl3","url":"/model-baseline#autumn-budget-2021","position":38},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Autumn Budget 2021","lvl2":"2021 reforms"},"content":"The government reduced the \n\nUniversal Credit taper rate from 63% to 55% and increased \n\nwork allowances by £500 annually in fiscal year 2021-22.","type":"content","url":"/model-baseline#autumn-budget-2021","position":39},{"hierarchy":{"lvl1":"Model baseline","lvl3":"End of COVID-19 support","lvl2":"2021 reforms"},"type":"lvl3","url":"/model-baseline#end-of-covid-19-support","position":40},{"hierarchy":{"lvl1":"Model baseline","lvl3":"End of COVID-19 support","lvl2":"2021 reforms"},"content":"The government ended the \n\nUniversal Credit £20 weekly uplift in fiscal year 2021-22, with rates reducing from the elevated 2020-21 levels.","type":"content","url":"/model-baseline#end-of-covid-19-support","position":41},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Stamp duty holiday extension","lvl2":"2021 reforms"},"type":"lvl3","url":"/model-baseline#stamp-duty-holiday-extension","position":42},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Stamp duty holiday extension","lvl2":"2021 reforms"},"content":"The government extended the stamp duty holiday with \n\nphased withdrawal of the nil rate increases during fiscal year 2021-22.","type":"content","url":"/model-baseline#stamp-duty-holiday-extension","position":43},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2020 reforms"},"type":"lvl2","url":"/model-baseline#id-2020-reforms","position":44},{"hierarchy":{"lvl1":"Model baseline","lvl2":"2020 reforms"},"content":"","type":"content","url":"/model-baseline#id-2020-reforms","position":45},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Summer Economic Update (July 2020)","lvl2":"2020 reforms"},"type":"lvl3","url":"/model-baseline#summer-economic-update-july-2020","position":46},{"hierarchy":{"lvl1":"Model baseline","lvl3":"Summer Economic Update (July 2020)","lvl2":"2020 reforms"},"content":"The government introduced a \n\nstamp duty holiday with nil rates up to £500,000 in fiscal year 2020-21 to support the housing market.","type":"content","url":"/model-baseline#summer-economic-update-july-2020","position":47},{"hierarchy":{"lvl1":"Model baseline","lvl3":"COVID-19 response (March 2020)","lvl2":"2020 reforms"},"type":"lvl3","url":"/model-baseline#covid-19-response-march-2020","position":48},{"hierarchy":{"lvl1":"Model baseline","lvl3":"COVID-19 response (March 2020)","lvl2":"2020 reforms"},"content":"Emergency measures included a \n\n£20 weekly increase to Universal Credit standard allowances and other working-age benefits in fiscal year 2020-21.","type":"content","url":"/model-baseline#covid-19-response-march-2020","position":49},{"hierarchy":{"lvl1":"Model baseline","lvl2":"Current baseline (2025)"},"type":"lvl2","url":"/model-baseline#current-baseline-2025","position":50},{"hierarchy":{"lvl1":"Model baseline","lvl2":"Current baseline (2025)"},"content":"The model baseline includes all reforms above, resulting in:\n\nIncome tax: 20%/40%/45% rates with personal allowance of £12,570 and higher rate threshold of £50,270\n\nNational Insurance: 8% employee rate, 15% employer rate, 6% self-employed rate\n\nCapital gains tax: 18%/24% rates with £3,000 annual exempt amount\n\nUniversal Credit: 55% taper rate with rebalancing reforms active\n\nBenefits: Standard uprating with targeted cost of living support for 2022","type":"content","url":"/model-baseline#current-baseline-2025","position":51},{"hierarchy":{"lvl1":"Model baseline","lvl2":"What is not modelled"},"type":"lvl2","url":"/model-baseline#what-is-not-modelled","position":52},{"hierarchy":{"lvl1":"Model baseline","lvl2":"What is not modelled"},"content":"The model does not include:\n\nPIP reform announced in Autumn Statement 2023: The government announced reforms to Personal Independence Payment assessments and eligibility criteria, phasing out 25% of claimants between 2025-29. These reforms are \n\ndefined as a scenario but not included in the baseline model\n\nNon-domiciled taxation changes: Remittance basis abolition and four-year exemption regime from fiscal year 2025-26 are not modelled\n\nNon-UK resident stamp duty surcharge: 2% additional rate from fiscal year 2021-22 is not modelled\n\nSome devolved tax policies: Beyond property transaction taxes, other devolved policies may have limited coverage\n\nAll parameter values include references to primary legislation and can be found in the \n\nPolicyEngine UK parameters directory.","type":"content","url":"/model-baseline#what-is-not-modelled","position":53},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms"},"type":"lvl1","url":"/uc-rebalancing","position":0},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms"},"content":"The Universal Credit rebalancing reforms represent changes to Universal Credit provisions introduced through the Universal Credit Bill. These reforms take effect from April 2026 and are designed to adjust benefit levels and eligibility criteria.","type":"content","url":"/uc-rebalancing","position":1},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Overview"},"type":"lvl2","url":"/uc-rebalancing#overview","position":2},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Overview"},"content":"The reforms consist of two main components:\n\nHealth element changes for new claimants: New Universal Credit claimants from April 2026 onwards receive a fixed health element amount, while existing claimants continue to receive inflation-linked increases.\n\nStandard allowance uplifts: The standard allowance receives additional uplifts beyond the annual inflationary increase from 2026-2029.","type":"content","url":"/uc-rebalancing#overview","position":3},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Health element changes"},"type":"lvl2","url":"/uc-rebalancing#health-element-changes","position":4},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Health element changes"},"content":"From April 2026, new Universal Credit claimants who qualify for the Limited Capacity for Work-Related Activity (LCWRA) element receive a fixed monthly amount of £217.26, rather than the inflation-adjusted amount that pre-2026 claimants continue to receive.\n\nThe implementation uses transition probabilities based on WPI Economics analysis for the Trussell Trust, derived from administrative Personal Independence Payment data. The probability of being a new claimant varies by year:\n\n2026: 11%\n\n2027: 13%\n\n2028: 16%\n\n2029: 22%","type":"content","url":"/uc-rebalancing#health-element-changes","position":5},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Standard allowance uplifts"},"type":"lvl2","url":"/uc-rebalancing#standard-allowance-uplifts","position":6},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Standard allowance uplifts"},"content":"The standard allowance receives additional percentage uplifts beyond the normal inflationary increase:\n\n2026: 2.3% additional uplift\n\n2027: 3.1% additional uplift (cumulative)\n\n2028: 4.0% additional uplift (cumulative)\n\n2029: 4.8% additional uplift (cumulative)\n\nThese uplifts are applied to the previous year’s standard allowance amount and compound over time.","type":"content","url":"/uc-rebalancing#standard-allowance-uplifts","position":7},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Implementation"},"type":"lvl2","url":"/uc-rebalancing#implementation","position":8},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Implementation"},"content":"The reforms are implemented through:\n\nParameters: Three YAML files define the reform’s activation status, health element amount for new claimants, and standard allowance uplift rates.\n\nScenario modifier: The add_universal_credit_reform function applies the changes to Universal Credit calculations during microsimulation.\n\nScenario: The universal_credit_july_2025_reform scenario enables the reforms in policy analysis.","type":"content","url":"/uc-rebalancing#implementation","position":9},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Examples"},"type":"lvl2","url":"/uc-rebalancing#examples","position":10},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Examples"},"content":"You can use these reforms in your own analysis by creating a Simulation with parametric changes to modify the reform parameters.","type":"content","url":"/uc-rebalancing#examples","position":11},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl3":"Disabling the rebalancing reforms entirely","lvl2":"Examples"},"type":"lvl3","url":"/uc-rebalancing#disabling-the-rebalancing-reforms-entirely","position":12},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl3":"Disabling the rebalancing reforms entirely","lvl2":"Examples"},"content":"from policyengine_uk import Simulation, Scenario\n\n# Disable the reforms from 2026 onwards\nscenario = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.rebalancing.active\": False,\n})\n\nsim = Simulation(scenario=scenario)","type":"content","url":"/uc-rebalancing#disabling-the-rebalancing-reforms-entirely","position":13},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl3":"Changing the standard allowance uplift parameters","lvl2":"Examples"},"type":"lvl3","url":"/uc-rebalancing#changing-the-standard-allowance-uplift-parameters","position":14},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl3":"Changing the standard allowance uplift parameters","lvl2":"Examples"},"content":"from policyengine_uk import Simulation, Scenario\n\n# Set different uplift rates - e.g. 5% in 2026, 7% in 2027\nscenario = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.rebalancing.standard_allowance_uplift\": {\n        \"2026-01-01\": 0.05,\n        \"2027-01-01\": 0.07,\n        \"2028-01-01\": 0.07,\n        \"2029-01-01\": 0.07\n    }\n})\n\nsim = Simulation(scenario=scenario)","type":"content","url":"/uc-rebalancing#changing-the-standard-allowance-uplift-parameters","position":15},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl3":"Changing the health element amount for new claimants","lvl2":"Examples"},"type":"lvl3","url":"/uc-rebalancing#changing-the-health-element-amount-for-new-claimants","position":16},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl3":"Changing the health element amount for new claimants","lvl2":"Examples"},"content":"from policyengine_uk import Simulation, Scenario\n\n# Set the new claimant health element to £250 per month\nscenario = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.rebalancing.new_claimant_health_element\": {\n        \"2026-01-01\": 250.00\n    }\n})\n\nsim = Simulation(scenario=scenario)","type":"content","url":"/uc-rebalancing#changing-the-health-element-amount-for-new-claimants","position":17},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Legislative reference"},"type":"lvl2","url":"/uc-rebalancing#legislative-reference","position":18},{"hierarchy":{"lvl1":"Universal Credit rebalancing reforms","lvl2":"Legislative reference"},"content":"The reforms are based on provisions in the Universal Credit Bill, available at: \n\nhttps://​bills​.parliament​.uk​/publications​/62123​/documents​/6889.","type":"content","url":"/uc-rebalancing#legislative-reference","position":19},{"hierarchy":{"lvl1":"Getting started"},"type":"lvl1","url":"/getting-started","position":0},{"hierarchy":{"lvl1":"Getting started"},"content":"PolicyEngine UK helps you analyse the UK tax and benefit system in two main ways: simulating policies for specific households, or running large-scale microsimulation analyses. The first requires just a few minutes of setup, while the second needs access to survey data and takes a bit longer to configure.\n\nIf possible, use Google Colab - it’s free and ensures everyone uses the same computing environment. The full microsimulation model needs just this snippet:!export HUGGING_FACE_TOKEN=<your_token>\n!pip install policyengine-uk","type":"content","url":"/getting-started","position":1},{"hierarchy":{"lvl1":"Getting started","lvl2":"Installing PolicyEngine UK"},"type":"lvl2","url":"/getting-started#installing-policyengine-uk","position":2},{"hierarchy":{"lvl1":"Getting started","lvl2":"Installing PolicyEngine UK"},"content":"Install the package like any other Python library (requires Python ≥3.7):pip install policyengine-uk","type":"content","url":"/getting-started#installing-policyengine-uk","position":3},{"hierarchy":{"lvl1":"Getting started","lvl2":"Your first household simulation"},"type":"lvl2","url":"/getting-started#your-first-household-simulation","position":4},{"hierarchy":{"lvl1":"Getting started","lvl2":"Your first household simulation"},"content":"Let’s start with a simple example: calculating how much income tax a 30-year-old earning £30,000 would pay.from policyengine_uk import Simulation\n\n# Define the household situation\nsituation = {\n    \"people\": {\n        \"person\": {\n            \"age\": {2025: 30},\n            \"employment_income\": {2025: 30_000},\n        },\n    },\n    \"benunits\": {\n        \"benunit\": {\n            \"members\": [\"person\"],\n        },\n    },\n    \"households\": {\n        \"household\": {\n            \"members\": [\"person\"],\n        }\n    },\n}\n\n# Create and run the simulation\nsimulation = Simulation(situation=situation)\nincome_tax = simulation.calculate(\"income_tax\", 2025)\nprint(f\"Income tax: £{income_tax[0]:.2f}\")\n\nThis gives us £3,486 in income tax. The structure might look complex at first, but it reflects how the UK tax system works - people belong to benefit units (families for benefit purposes) and households (for housing costs and council tax).","type":"content","url":"/getting-started#your-first-household-simulation","position":5},{"hierarchy":{"lvl1":"Getting started","lvl2":"Analysing a policy reform"},"type":"lvl2","url":"/getting-started#analysing-a-policy-reform","position":6},{"hierarchy":{"lvl1":"Getting started","lvl2":"Analysing a policy reform"},"content":"Now let’s see what happens if we increase the basic rate of income tax from 20% to 25%:# Define the policy reform\nincrease_basic_rate = {\"gov.hmrc.income_tax.rates.uk[0].rate\": 0.25}\n\n# Compare baseline and reformed systems\nbaseline = Simulation(situation=situation)\nreformed = Simulation(situation=situation, reform=increase_basic_rate)\n\nbaseline_tax = baseline.calculate(\"income_tax\", 2025)[0]\nreformed_tax = reformed.calculate(\"income_tax\", 2025)[0]\n\nincrease = reformed_tax - baseline_tax\nprint(f\"Tax increase: £{increase:.2f}\")\n\nThe reform increases this person’s tax by £871.50 per year. Policy parameters use a hierarchical structure - here we’re changing the first UK income tax rate (uk[0].rate), which is the basic rate.","type":"content","url":"/getting-started#analysing-a-policy-reform","position":7},{"hierarchy":{"lvl1":"Getting started","lvl2":"Running microsimulation analyses"},"type":"lvl2","url":"/getting-started#running-microsimulation-analyses","position":8},{"hierarchy":{"lvl1":"Getting started","lvl2":"Running microsimulation analyses"},"content":"To analyse policies across the entire population, you’ll need survey data. PolicyEngine provides processed datasets via HuggingFace, but you’ll need an account and access token:\n\nCreate a \n\nHuggingFace account\n\nGenerate a personal access token in your settings\n\nSet it as an environment variable:export HUGGING_FACE_TOKEN=your_token_here","type":"content","url":"/getting-started#running-microsimulation-analyses","position":9},{"hierarchy":{"lvl1":"Getting started","lvl3":"Your first population analysis","lvl2":"Running microsimulation analyses"},"type":"lvl3","url":"/getting-started#your-first-population-analysis","position":10},{"hierarchy":{"lvl1":"Getting started","lvl3":"Your first population analysis","lvl2":"Running microsimulation analyses"},"content":"Here’s how to calculate total Universal Credit spending across the UK:from policyengine_uk import Microsimulation\n\n# Load the enhanced Family Resources Survey data\nsim = Microsimulation(\n    dataset=\"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\"\n)\n\n# Calculate total UC spending (in billions)\ntotal_uc = sim.calculate(\"universal_credit\", 2025).sum() / 1e9\nprint(f\"Total Universal Credit spending: £{total_uc:.1f}bn\")\n\nThis shows approximately £79.4bn in Universal Credit spending.","type":"content","url":"/getting-started#your-first-population-analysis","position":11},{"hierarchy":{"lvl1":"Getting started","lvl3":"Estimating revenue from reforms","lvl2":"Running microsimulation analyses"},"type":"lvl3","url":"/getting-started#estimating-revenue-from-reforms","position":12},{"hierarchy":{"lvl1":"Getting started","lvl3":"Estimating revenue from reforms","lvl2":"Running microsimulation analyses"},"content":"Let’s apply the same basic rate increase to the entire population:# Set up baseline and reformed simulations\nDATASET = \"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\"\n\nbaseline = Microsimulation(dataset=DATASET)\nreformed = Microsimulation(dataset=DATASET, reform=increase_basic_rate)\n\n# Calculate the revenue impact\nbaseline_income = baseline.calculate(\"household_net_income\", 2025)\nreformed_income = reformed.calculate(\"household_net_income\", 2025)\n\nrevenue = -(reformed_income - baseline_income).sum() / 1e9\nprint(f\"Additional revenue: £{revenue:.1f}bn per year\")\n\nThe reform would raise approximately £35.5bn annually.","type":"content","url":"/getting-started#estimating-revenue-from-reforms","position":13},{"hierarchy":{"lvl1":"Getting started","lvl2":"Working with complex households"},"type":"lvl2","url":"/getting-started#working-with-complex-households","position":14},{"hierarchy":{"lvl1":"Getting started","lvl2":"Working with complex households"},"content":"Real households often have multiple people, children, and various income sources. Here’s a family with two adults and two children:family_situation = {\n    \"people\": {\n        \"parent_1\": {\n            \"age\": {2025: 35},\n            \"employment_income\": {2025: 25_000},\n        },\n        \"parent_2\": {\n            \"age\": {2025: 33},\n            \"employment_income\": {2025: 15_000},\n        },\n        \"child_1\": {\n            \"age\": {2025: 8},\n        },\n        \"child_2\": {\n            \"age\": {2025: 5},\n        },\n    },\n    \"benunits\": {\n        \"family\": {\n            \"members\": [\"parent_1\", \"parent_2\", \"child_1\", \"child_2\"],\n        },\n    },\n    \"households\": {\n        \"home\": {\n            \"members\": [\"parent_1\", \"parent_2\", \"child_1\", \"child_2\"],\n            \"housing_costs\": {2025: 9600},  # Annual rent\n        }\n    },\n}\n\nfamily_sim = Simulation(situation=family_situation)\n\n# Calculate various benefits and taxes\nchild_benefit = family_sim.calculate(\"child_benefit\", 2025)[0]\nuniversal_credit = family_sim.calculate(\"universal_credit\", 2025)[0]\ntotal_tax = family_sim.calculate(\"income_tax\", 2025).sum()\n\nprint(f\"Child benefit: £{child_benefit:.2f}\")\nprint(f\"Universal Credit: £{universal_credit:.2f}\")\nprint(f\"Total income tax: £{total_tax:.2f}\")","type":"content","url":"/getting-started#working-with-complex-households","position":15},{"hierarchy":{"lvl1":"Getting started","lvl2":"Next steps"},"type":"lvl2","url":"/getting-started#next-steps","position":16},{"hierarchy":{"lvl1":"Getting started","lvl2":"Next steps"},"content":"You’re now ready to explore PolicyEngine UK further. The \n\nPolicyEngine web app includes a ‘Reproduce in Python’ section at the bottom of each page, which generates code snippets for any household or reform you create there.\n\nFor more detailed guidance, see:\n\nSimulations - comprehensive guide to running simulations\n\nScenarios - creating and combining policy reforms","type":"content","url":"/getting-started#next-steps","position":17},{"hierarchy":{"lvl1":"Creating policy scenarios"},"type":"lvl1","url":"/scenarios","position":0},{"hierarchy":{"lvl1":"Creating policy scenarios"},"content":"The Scenario class lets you define policy reforms and apply them to simulations. This guide shows you how to create everything from simple parameter changes to complex reform packages, and how to combine different policy ideas together.","type":"content","url":"/scenarios","position":1},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Your first policy scenario"},"type":"lvl2","url":"/scenarios#your-first-policy-scenario","position":2},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Your first policy scenario"},"content":"Let’s start by creating a scenario that reduces the basic rate of income tax from 20% to 15%:from policyengine_uk import Scenario, Simulation\n\n# Create a scenario with one policy change\nscenario = Scenario(parameter_changes={\n    \"gov.hmrc.income_tax.rates.uk[0].rate\": 0.15\n})\n\n# Apply it to a simulation\nsituation = {\n    \"people\": {\n        \"person\": {\n            \"age\": {2025: 35},\n            \"employment_income\": {2025: 40_000}\n        }\n    },\n    \"benunits\": {\"benunit\": {\"members\": [\"person\"]}},\n    \"households\": {\"household\": {\"members\": [\"person\"]}}\n}\n\nsim = Simulation(situation=situation, scenario=scenario)\nincome_tax = sim.calculate(\"income_tax\", 2025).mean()\nprint(f\"Income tax under 15% basic rate: £{income_tax:.2f}\")\n\nUnder this scenario, this person would pay £2,486 instead of the current £4,486 - a reduction of £2,000 per year due to the lower tax rate.","type":"content","url":"/scenarios#your-first-policy-scenario","position":3},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Understanding parameter paths"},"type":"lvl2","url":"/scenarios#understanding-parameter-paths","position":4},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Understanding parameter paths"},"content":"PolicyEngine UK organises policy parameters in a hierarchical structure. Each parameter has a path that describes where it sits in the system:# Income tax parameters\n\"gov.hmrc.income_tax.rates.uk[0].rate\"          # Basic rate (20%)\n\"gov.hmrc.income_tax.rates.uk[1].rate\"          # Higher rate (40%)\n\"gov.hmrc.income_tax.personal_allowance\"        # Personal allowance\n\"gov.hmrc.income_tax.rates.uk[0].threshold\"     # Basic rate threshold\n\n# Universal Credit parameters\n\"gov.dwp.universal_credit.standard_allowance.single.OVER_25\"     # Single person allowance\n\"gov.dwp.universal_credit.elements.housing.max_monthly_cap\"      # Housing cost cap\n\"gov.dwp.universal_credit.means_test.income_disregard\"           # Work allowance\n\n# Child benefits\n\"gov.hmrc.child_benefit.rates.first_child\"      # First child rate\n\"gov.hmrc.child_benefit.rates.additional_child\" # Additional children rate\n\nYou can find parameter paths by exploring the PolicyEngine web app or looking in the parameters/ directory of the codebase.","type":"content","url":"/scenarios#understanding-parameter-paths","position":5},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Creating comprehensive reform packages"},"type":"lvl2","url":"/scenarios#creating-comprehensive-reform-packages","position":6},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Creating comprehensive reform packages"},"content":"Real policy proposals often involve multiple changes. Here’s how to create a comprehensive reform:# A comprehensive package that increases Universal Credit support while adjusting income tax\n# This represents the kind of coordinated policy change you might see in a budget\nwelfare_reform = Scenario(parameter_changes={\n    # Increase UC standard allowances\n    \"gov.dwp.universal_credit.standard_allowance.single.OVER_25\": 500,\n    \"gov.dwp.universal_credit.standard_allowance.single.UNDER_25\": 400,\n    \"gov.dwp.universal_credit.standard_allowance.couple\": 700,\n    \n    # Reduce UC taper rate (less benefit withdrawn per pound earned)\n    \"gov.dwp.universal_credit.means_test.reduction_rate\": 0.55,\n    \n    # Increase income tax personal allowance\n    \"gov.hmrc.income_tax.personal_allowance\": 15_000,\n    \n    # Reduce basic rate slightly to help fund UC increases\n    \"gov.hmrc.income_tax.rates.uk[0].rate\": 0.22\n})\n\n# Test on a working family\nfamily_situation = {\n    \"people\": {\n        \"parent\": {\"age\": {2025: 30}, \"employment_income\": {2025: 20_000}},\n        \"child\": {\"age\": {2025: 5}}\n    },\n    \"benunits\": {\"family\": {\"members\": [\"parent\", \"child\"]}},\n    \"households\": {\n        \"home\": {\n            \"members\": [\"parent\", \"child\"],\n            \"housing_costs\": {2025: 7200}  # Annual housing costs\n        }\n    }\n}\n\nreformed_sim = Simulation(situation=family_situation, scenario=welfare_reform)\n\n# Calculate the impact of this comprehensive package on the family\nuc_amount = reformed_sim.calculate(\"universal_credit\", 2025).mean()\nincome_tax = reformed_sim.calculate(\"income_tax\", 2025).mean()\nnet_income = reformed_sim.calculate(\"household_net_income\", 2025).mean()\n\nprint(f\"Universal Credit: £{uc_amount:.2f} per month\")\nprint(f\"Income tax: £{income_tax:.2f} per year\")\nprint(f\"Monthly net income: £{net_income/12:.2f}\")","type":"content","url":"/scenarios#creating-comprehensive-reform-packages","position":7},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Combining scenarios"},"type":"lvl2","url":"/scenarios#combining-scenarios","position":8},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Combining scenarios"},"content":"You can combine different scenarios using the + operator, which is useful for testing different combinations of policies:# Create separate scenarios for different policy areas\ntax_scenario = Scenario(parameter_changes={\n    \"gov.hmrc.income_tax.personal_allowance\": 15_000,\n    \"gov.hmrc.income_tax.rates.uk[0].rate\": 0.18\n})\n\nbenefits_scenario = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.standard_allowance.single.OVER_25\": 450,\n    \"gov.dwp.universal_credit.means_test.reduction_rate\": 0.50\n})\n\nchildcare_scenario = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.elements.childcare.max_proportion\": 0.90\n})\n\n# Combine them in different ways\ntax_and_benefits = tax_scenario + benefits_scenario\nfull_package = tax_scenario + benefits_scenario + childcare_scenario\n\n# Test each combination to see how different policy areas interact\n# This shows how you can build up complex policies piece by piece\nfor name, scenario in [(\"Tax only\", tax_scenario), (\"Benefits only\", benefits_scenario), \n                      (\"Tax + benefits\", tax_and_benefits), (\"Full package\", full_package)]:\n    sim = Simulation(situation=family_situation, scenario=scenario)\n    net_income = sim.calculate(\"household_net_income\", 2025).mean()\n    print(f\"{name}: £{net_income/12:.2f} per month\")","type":"content","url":"/scenarios#combining-scenarios","position":9},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Defining structural scenarios"},"type":"lvl2","url":"/scenarios#defining-structural-scenarios","position":10},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Defining structural scenarios"},"content":"Beyond simple parameter changes, you sometimes need scenarios that make structural modifications to how the tax-benefit system works. Let’s walk through how to create these, using examples similar to those in PolicyEngine UK’s scenarios module.","type":"content","url":"/scenarios#defining-structural-scenarios","position":11},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Creating a two-child limit repeal scenario","lvl2":"Defining structural scenarios"},"type":"lvl3","url":"/scenarios#creating-a-two-child-limit-repeal-scenario","position":12},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Creating a two-child limit repeal scenario","lvl2":"Defining structural scenarios"},"content":"The two-child limit restricts Universal Credit child elements to the first two children. Here’s how to build a scenario that removes this restriction:import numpy as np\nfrom policyengine_uk import Scenario\n\n# The two-child limit is controlled by this parameter\n# Setting it to infinity effectively removes the limit\nrepeal_two_child_limit = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.elements.child.limit.child_count\": {\n        \"year:2026:10\": np.inf  # From October 2026 onwards, no limit\n    }\n})\n\n# Test this on a family with three children\nlarge_family = {\n    \"people\": {\n        \"parent\": {\"age\": {2026: 35}, \"employment_income\": {2026: 18_000}},\n        \"child1\": {\"age\": {2026: 12}},\n        \"child2\": {\"age\": {2026: 8}},\n        \"child3\": {\"age\": {2026: 4}}  # Third child - currently gets no UC support\n    },\n    \"benunits\": {\"family\": {\"members\": [\"parent\", \"child1\", \"child2\", \"child3\"]}},\n    \"households\": {\n        \"home\": {\n            \"members\": [\"parent\", \"child1\", \"child2\", \"child3\"],\n            \"housing_costs\": {2026: 10200}  # Annual housing costs\n        }\n    }\n}\n\n# Compare the impact\nbaseline_sim = Simulation(situation=large_family)\nreformed_sim = Simulation(situation=large_family, scenario=repeal_two_child_limit)\n\nbaseline_uc = baseline_sim.calculate(\"universal_credit\", 2026).mean()\nreformed_uc = reformed_sim.calculate(\"universal_credit\", 2026).mean()\n\nincrease = reformed_uc - baseline_uc\nprint(f\"UC increase from third child: £{increase:.2f} per month\")","type":"content","url":"/scenarios#creating-a-two-child-limit-repeal-scenario","position":13},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Building a benefit cap reindexing scenario","lvl2":"Defining structural scenarios"},"type":"lvl3","url":"/scenarios#building-a-benefit-cap-reindexing-scenario","position":14},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Building a benefit cap reindexing scenario","lvl2":"Defining structural scenarios"},"content":"The benefit cap hasn’t risen with inflation since 2016. Here’s how to create a scenario that automatically indexes it to CPI:from policyengine_uk import Scenario, Simulation\nfrom policyengine_core.parameters import Parameter\n\ndef reindex_benefit_cap_to_cpi(simulation: Simulation):\n    \"\"\"Modify simulation to index benefit cap parameters to CPI inflation\"\"\"\n    # Reset the parameter system to make changes\n    simulation.tax_benefit_system.reset_parameters()\n    \n    # Find all benefit cap parameters in the system\n    params = simulation.tax_benefit_system.parameters.gov.dwp.benefit_cap.get_descendants()\n    \n    # Filter to only the actual parameter values (leaf nodes)\n    cap_parameters = [param for param in params if isinstance(param, Parameter)]\n    \n    for parameter in cap_parameters:\n        # Remove any values after 2025 (current frozen values)\n        parameter.values_list = [\n            entry for entry in parameter.values_list \n            if entry.instant_str < \"2026-01-01\"\n        ]\n        \n        # Set the parameter to follow CPI uprating from 2026\n        parameter.metadata.update(uprating=\"gov.benefit_uprating_cpi\")\n    \n    # Reprocess the parameters to apply changes\n    simulation.tax_benefit_system.process_parameters()\n\n# Create the scenario using a simulation modifier\nreindex_benefit_cap = Scenario(simulation_modifier=reindex_benefit_cap_to_cpi)\n\n# Test on a family that might hit the benefit cap\nbenefit_cap_family = {\n    \"people\": {\n        \"parent1\": {\"age\": {2026: 30}, \"employment_income\": {2026: 0}},\n        \"parent2\": {\"age\": {2026: 28}, \"employment_income\": {2026: 0}},\n        \"child1\": {\"age\": {2026: 6}},\n        \"child2\": {\"age\": {2026: 3}}\n    },\n    \"benunits\": {\"family\": {\"members\": [\"parent1\", \"parent2\", \"child1\", \"child2\"]}},\n    \"households\": {\n        \"home\": {\n            \"members\": [\"parent1\", \"parent2\", \"child1\", \"child2\"],\n            \"housing_costs\": {2026: 14400}  # High annual housing costs\n        }\n    }\n}\n\nbaseline_sim = Simulation(situation=benefit_cap_family)\nreformed_sim = Simulation(situation=benefit_cap_family, scenario=reindex_benefit_cap)\n\n# Compare the benefit cap levels\nbaseline_cap = baseline_sim.calculate(\"benefit_cap\", 2026).mean()\nreformed_cap = reformed_sim.calculate(\"benefit_cap\", 2026).mean()\n\nprint(f\"Benefit cap - frozen: £{baseline_cap:.0f}/year, indexed: £{reformed_cap:.0f}/year\")","type":"content","url":"/scenarios#building-a-benefit-cap-reindexing-scenario","position":15},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Advanced scenario techniques"},"type":"lvl2","url":"/scenarios#advanced-scenario-techniques","position":16},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Advanced scenario techniques"},"content":"","type":"content","url":"/scenarios#advanced-scenario-techniques","position":17},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Time-varying parameters","lvl2":"Advanced scenario techniques"},"type":"lvl3","url":"/scenarios#time-varying-parameters","position":18},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Time-varying parameters","lvl2":"Advanced scenario techniques"},"content":"Some reforms phase in over time:# A scenario that gradually increases the personal allowance over four years\n# This kind of phasing helps manage fiscal costs and economic adjustment\nphased_scenario = Scenario(parameter_changes={\n    \"gov.hmrc.income_tax.personal_allowance\": {\n        \"2025\": 13_000,\n        \"2026\": 14_000,\n        \"2027\": 15_000,\n        \"2028\": 16_000\n    }\n})\n\n# Test this on a middle-income earner to see the progressive impact\nsituation = {\n    \"people\": {\"person\": {\"age\": {2025: 30}, \"employment_income\": {2025: 35_000}}},\n    \"benunits\": {\"benunit\": {\"members\": [\"person\"]}},\n    \"households\": {\"household\": {\"members\": [\"person\"]}}\n}\n\nsim = Simulation(situation=situation, scenario=phased_scenario)\n\n# Show how the tax burden decreases year by year\nfor year in [2025, 2026, 2027, 2028]:\n    allowance = sim.calculate(\"income_tax_personal_allowance\", year).mean()\n    tax = sim.calculate(\"income_tax\", year).mean()\n    print(f\"{year}: Personal allowance £{allowance:.0f}, annual tax £{tax:.2f}\")","type":"content","url":"/scenarios#time-varying-parameters","position":19},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Creating complex scenarios with simulation modifiers","lvl2":"Advanced scenario techniques"},"type":"lvl3","url":"/scenarios#creating-complex-scenarios-with-simulation-modifiers","position":20},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Creating complex scenarios with simulation modifiers","lvl2":"Advanced scenario techniques"},"content":"Some policy changes require modifying individual records rather than just changing parameters. Here’s how to build a scenario that phases out PIP payments for some claimants over time:import numpy as np\nfrom policyengine_uk import Scenario, Simulation\n\ndef phase_out_pip_gradually(sim: Simulation):\n    \"\"\"Gradually phase out PIP for a proportion of claimants between 2025-2029\"\"\"\n    # Set random seed for reproducible results\n    np.random.seed(42)\n    \n    # Create random assignment for each person\n    pip_phase_out_seed = np.random.random(len(sim.calculate(\"person_id\")))\n    \n    # Define the phase-out period\n    start_year = 2025\n    end_year = 2029\n    \n    # Apply phase-out year by year\n    for year in range(start_year, end_year + 1):\n        # Get current PIP payments\n        current_pip = sim.calculate(\"pip\", year)\n        \n        # Calculate how far through the phase-out we are\n        phase_progress = (year - start_year) / (end_year - start_year)\n        \n        # 25% of claimants lose PIP, gradually over the period\n        # In year 1, nobody loses it; by final year, 25% have lost it completely\n        affected_threshold = 0.25 * phase_progress\n        \n        # Set PIP to zero for affected claimants\n        current_pip[pip_phase_out_seed < affected_threshold] = 0\n        \n        # Apply the modified values back to the simulation\n        sim.set_input(\"pip\", year, current_pip)\n    \n    return sim\n\n# Create the scenario\npip_phase_out = Scenario(simulation_modifier=phase_out_pip_gradually)\n\n# Test on someone who receives PIP\npip_recipient = {\n    \"people\": {\n        \"person\": {\n            \"age\": {2025: 45},\n            \"pip\": {2025: 150},  # Weekly PIP payment\n            \"employment_income\": {2025: 8_000}\n        }\n    },\n    \"benunits\": {\"benunit\": {\"members\": [\"person\"]}},\n    \"households\": {\"household\": {\"members\": [\"person\"]}}\n}\n\n# Compare baseline and phase-out scenarios\nbaseline_sim = Simulation(situation=pip_recipient)\nreformed_sim = Simulation(situation=pip_recipient, scenario=pip_phase_out)\n\n# Show how PIP changes over the phase-out period\nfor year in [2025, 2027, 2029]:\n    baseline_pip = baseline_sim.calculate(\"pip\", year).mean()\n    reformed_pip = reformed_sim.calculate(\"pip\", year).mean()\n    print(f\"{year}: Baseline £{baseline_pip:.0f}/week, with phase-out £{reformed_pip:.0f}/week\")","type":"content","url":"/scenarios#creating-complex-scenarios-with-simulation-modifiers","position":21},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Building Universal Credit scenarios with dynamic changes","lvl2":"Advanced scenario techniques"},"type":"lvl3","url":"/scenarios#building-universal-credit-scenarios-with-dynamic-changes","position":22},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl3":"Building Universal Credit scenarios with dynamic changes","lvl2":"Advanced scenario techniques"},"content":"Some scenarios need to make changes that depend on the simulation’s own data. Here’s how to create a UC scenario that adjusts payments based on claimant characteristics:from policyengine_uk import Scenario, Microsimulation\nimport numpy as np\n\ndef modify_uc_for_new_claimants(sim: Microsimulation):\n    \"\"\"Reduce health elements for new UC claimants while increasing standard allowances\"\"\"\n    # Access the parameter system to check if reforms are active\n    rebalancing_params = sim.tax_benefit_system.parameters.gov.dwp.universal_credit.rebalancing\n    \n    # Create random assignment to simulate new vs existing claimants\n    np.random.seed(42)\n    uc_seed = np.random.random(len(sim.calculate(\"benunit_id\")))\n    \n    # Proportion of claimants who are \"new\" each year (based on real data)\n    new_claimant_rates = {\n        2025: 0.00,  # No change in 2025\n        2026: 0.11,  # 11% are new claimants\n        2027: 0.13,\n        2028: 0.16,\n        2029: 0.22\n    }\n    \n    # Apply changes year by year\n    for year in range(2026, 2030):\n        if not rebalancing_params.active(year):\n            continue  # Skip if reforms aren't active this year\n            \n        # Identify new claimants\n        is_new_claimant = uc_seed < new_claimant_rates[year]\n        \n        # Modify health element for new claimants\n        current_health_element = sim.calculate(\"uc_LCWRA_element\", year)\n        new_health_amount = rebalancing_params.new_claimant_health_element(year) * 12\n        \n        # Set new amount for new claimants who get health element\n        current_health_element[\n            (current_health_element > 0) & is_new_claimant\n        ] = new_health_amount\n        \n        sim.set_input(\"uc_LCWRA_element\", year, current_health_element)\n        \n        # Increase standard allowances for everyone\n        uplift_rate = rebalancing_params.standard_allowance_uplift(year)\n        previous_allowance = sim.calculate(\"uc_standard_allowance\", year - 1)\n        new_allowance = previous_allowance * (1 + uplift_rate)\n        sim.set_input(\"uc_standard_allowance\", year, new_allowance)\n\n# Create the UC rebalancing scenario\nuc_rebalancing = Scenario(simulation_modifier=modify_uc_for_new_claimants)\n\n# This scenario needs the rebalancing parameters to be active\nuc_rebalancing_active = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.rebalancing.active\": True\n}) + uc_rebalancing\n\n# Test on a typical UC claimant\nuc_claimant = {\n    \"people\": {\n        \"person\": {\n            \"age\": {2026: 35},\n            \"employment_income\": {2026: 8_000},\n            \"uc_LCWRA_element\": {2026: 390}  # Monthly health element\n        }\n    },\n    \"benunits\": {\"benunit\": {\"members\": [\"person\"]}},\n    \"households\": {\n        \"home\": {\n            \"members\": [\"person\"],\n            \"housing_costs\": {2026: 7200}\n        }\n    }\n}\n\nbaseline_sim = Simulation(situation=uc_claimant)\nreformed_sim = Simulation(situation=uc_claimant, scenario=uc_rebalancing_active)\n\n# Compare UC components\nfor year in [2026, 2028]:\n    baseline_uc = baseline_sim.calculate(\"universal_credit\", year).mean()\n    reformed_uc = reformed_sim.calculate(\"universal_credit\", year).mean()\n    print(f\"{year}: Baseline UC £{baseline_uc:.0f}/month, reformed £{reformed_uc:.0f}/month\")","type":"content","url":"/scenarios#building-universal-credit-scenarios-with-dynamic-changes","position":23},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Analysing scenarios at population level"},"type":"lvl2","url":"/scenarios#analysing-scenarios-at-population-level","position":24},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Analysing scenarios at population level"},"content":"Use microsimulation to understand the broader impact of your scenarios:from policyengine_uk import Microsimulation\n\n# Create a major scenario package combining tax cuts and benefit increases\n# This represents a significant fiscal intervention\nmajor_scenario = Scenario(parameter_changes={\n    \"gov.hmrc.income_tax.rates.uk[0].rate\": 0.15,          # Cut basic rate from 20% to 15%\n    \"gov.hmrc.income_tax.personal_allowance\": 16_000,       # Raise allowance significantly\n    \"gov.dwp.universal_credit.standard_allowance.single.OVER_25\": 600,  # Increase UC by £100/month\n    \"gov.dwp.universal_credit.means_test.reduction_rate\": 0.45  # Reduce taper from 55% to 45%\n})\n\n# Compare baseline and reform\nbaseline = Microsimulation(\n    dataset=\"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\"\n)\nreformed = Microsimulation(\n    dataset=\"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\",\n    scenario=major_scenario\n)\n\n# Calculate the fiscal impact of this major intervention\n# Tax cuts reduce revenue, benefit increases raise spending\nbaseline_revenue = baseline.calculate(\"income_tax\", 2025).sum() / 1e9\nreformed_revenue = reformed.calculate(\"income_tax\", 2025).sum() / 1e9\ntax_cost = baseline_revenue - reformed_revenue\n\nbaseline_uc = baseline.calculate(\"universal_credit\", 2025).sum() / 1e9\nreformed_uc = reformed.calculate(\"universal_credit\", 2025).sum() / 1e9\nuc_cost = reformed_uc - baseline_uc\n\ntotal_cost = tax_cost + uc_cost\n\nprint(f\"Income tax revenue loss: £{tax_cost:.1f}bn\")\nprint(f\"UC spending increase: £{uc_cost:.1f}bn\")\nprint(f\"Total fiscal cost: £{total_cost:.1f}bn\")\n\n# Calculate distributional impact\nbaseline_poverty = baseline.calculate(\"in_poverty\", 2025).mean()\nreformed_poverty = reformed.calculate(\"in_poverty\", 2025).mean()\npoverty_reduction = baseline_poverty - reformed_poverty\n\nprint(f\"Poverty rate reduction: {poverty_reduction:.1%}\")","type":"content","url":"/scenarios#analysing-scenarios-at-population-level","position":25},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Testing scenarios step by step"},"type":"lvl2","url":"/scenarios#testing-scenarios-step-by-step","position":26},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Testing scenarios step by step"},"content":"When building complex scenarios, test each component separately:# Build up a complex scenario incrementally to understand each component's impact\n# Starting with an empty scenario as our baseline\nbase_scenario = Scenario(parameter_changes={})\n\n# Add income tax changes\nwith_tax_changes = base_scenario + Scenario(parameter_changes={\n    \"gov.hmrc.income_tax.rates.uk[0].rate\": 0.18,\n    \"gov.hmrc.income_tax.personal_allowance\": 14_000\n})\n\n# Add UC changes\nwith_uc_changes = with_tax_changes + Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.standard_allowance.single.OVER_25\": 500,\n    \"gov.dwp.universal_credit.means_test.reduction_rate\": 0.50\n})\n\n# Add child benefit changes\nfull_scenario = with_uc_changes + Scenario(parameter_changes={\n    \"gov.hmrc.child_benefit.rates.first_child\": 25,\n    \"gov.hmrc.child_benefit.rates.additional_child\": 18\n})\n\n# Test the impact of each addition\ntest_situation = {\n    \"people\": {\n        \"parent\": {\"age\": {2025: 30}, \"employment_income\": {2025: 25_000}},\n        \"child\": {\"age\": {2025: 6}}\n    },\n    \"benunits\": {\"family\": {\"members\": [\"parent\", \"child\"]}},\n    \"households\": {\"home\": {\"members\": [\"parent\", \"child\"], \"housing_costs\": {2025: 8400}}}  # Annual housing costs\n}\n\n# Test each incremental addition to see cumulative effects\nscenarios = [(\"Baseline\", base_scenario), (\"With tax changes\", with_tax_changes),\n             (\"With UC changes\", with_uc_changes), (\"Full package\", full_scenario)]\n\nfor name, scenario in scenarios:\n    sim = Simulation(situation=test_situation, scenario=scenario)\n    net_income = sim.calculate(\"household_net_income\", 2025).mean()\n    print(f\"{name}: £{net_income/12:.2f} per month\")","type":"content","url":"/scenarios#testing-scenarios-step-by-step","position":27},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Practical tips for scenario design"},"type":"lvl2","url":"/scenarios#practical-tips-for-scenario-design","position":28},{"hierarchy":{"lvl1":"Creating policy scenarios","lvl2":"Practical tips for scenario design"},"content":"Start simple and build complexity gradually\n\nTest scenarios on multiple household types to understand different impacts\n\nUse meaningful parameter names and document your choices\n\nCombine related changes logically (tax reforms with tax reforms, benefit changes with benefit changes)\n\nAlways check the fiscal impact of major reforms\n\nConsider unintended interactions between different policy areas\n\nThese techniques let you model complex policy changes that go beyond simple parameter adjustments. Simulation modifiers give you complete control over how the tax-benefit system works, allowing you to implement everything from gradual phase-outs to dynamic eligibility changes. The key is to understand the underlying data structures and use them thoughtfully to represent real policy proposals.","type":"content","url":"/scenarios#practical-tips-for-scenario-design","position":29},{"hierarchy":{"lvl1":"Running simulations"},"type":"lvl1","url":"/simulations","position":0},{"hierarchy":{"lvl1":"Running simulations"},"content":"The Simulation class is the heart of PolicyEngine UK - it calculates tax and benefit outcomes for people and households. This guide walks you through everything from basic calculations to advanced microsimulation analysis.","type":"content","url":"/simulations","position":1},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Creating your first simulation"},"type":"lvl2","url":"/simulations#creating-your-first-simulation","position":2},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Creating your first simulation"},"content":"Every simulation starts with a situation that describes the people, benefit units, and households you want to analyse:from policyengine_uk import Simulation\n\nsituation = {\n    \"people\": {\n        \"person_1\": {\n            \"age\": {2025: 30},\n            \"employment_income\": {2025: 30_000}\n        }\n    },\n    \"benunits\": {\n        \"benunit_1\": {\n            \"members\": [\"person_1\"]\n        }\n    },\n    \"households\": {\n        \"household_1\": {\n            \"members\": [\"person_1\"]\n        }\n    }\n}\n\nsim = Simulation(situation=situation)\nincome_tax = sim.calculate(\"income_tax\", 2025)\nprint(f\"Income tax: £{income_tax[0]:.2f}\")\n\nThis creates a simulation for one person and calculates their annual income tax liability. The result shows they would pay £3,486 per year in income tax.","type":"content","url":"/simulations#creating-your-first-simulation","position":3},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Understanding the situation structure"},"type":"lvl2","url":"/simulations#understanding-the-situation-structure","position":4},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Understanding the situation structure"},"content":"The situation dictionary has three main sections:\n\nPeople define individuals with their characteristics:\"people\": {\n    \"sarah\": {\n        \"age\": {2025: 28},\n        \"employment_income\": {2025: 35_000},\n        \"pension_contributions\": {2025: 2_800}\n    },\n    \"tom\": {\n        \"age\": {2025: 32},\n        \"self_employment_income\": {2025: 18_000}\n    }\n}\n\nBenefit units group people for benefit calculations (typically families):\"benunits\": {\n    \"family\": {\n        \"members\": [\"sarah\", \"tom\"]\n    }\n}\n\nHouseholds group people who live together:\"households\": {\n    \"home\": {\n        \"members\": [\"sarah\", \"tom\"],\n        \"housing_costs\": {2025: 11400},  # Annual rent\n        \"council_tax\": {2025: 1_800}   # Annual\n    }\n}","type":"content","url":"/simulations#understanding-the-situation-structure","position":5},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Calculating different variables"},"type":"lvl2","url":"/simulations#calculating-different-variables","position":6},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Calculating different variables"},"content":"PolicyEngine UK can calculate hundreds of variables. Here are some common ones:# Taxes\nincome_tax = sim.calculate(\"income_tax\", 2025)\nnational_insurance = sim.calculate(\"national_insurance\", 2025)\ncouncil_tax = sim.calculate(\"council_tax\", 2025)\n\n# Benefits\nuniversal_credit = sim.calculate(\"universal_credit\", 2025)\nchild_benefit = sim.calculate(\"child_benefit\", 2025)\nstate_pension = sim.calculate(\"state_pension\", 2025)\n\n# Summary measures\nnet_income = sim.calculate(\"household_net_income\", 2025)\nin_poverty = sim.calculate(\"in_poverty\", 2025)\nmarginal_tax_rate = sim.calculate(\"marginal_tax_rate\", 2025)\n\nThese calculations return arrays because simulations can handle multiple people, benefit units or households simultaneously. Each variable gives you results at the appropriate level - income tax is calculated per person, Universal Credit per benefit unit, and council tax per household.","type":"content","url":"/simulations#calculating-different-variables","position":7},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Simulating policy scenarios"},"type":"lvl2","url":"/simulations#simulating-policy-scenarios","position":8},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Simulating policy scenarios"},"content":"To test policy changes, create a scenario and apply it to your simulation. This example shows what happens when we increase Universal Credit’s standard allowance for single people over 25 from the current rate to £500 per month:from policyengine_uk import Scenario\n\n# Create a scenario that increases UC standard allowance\nscenario = Scenario(parameter_changes={\n    \"gov.dwp.universal_credit.standard_allowance.single.OVER_25\": 500\n})\n\n# Apply the scenario to create a new simulation\nreformed_sim = Simulation(situation=situation, scenario=scenario)\n\n# Compare the average UC payment between baseline and scenario\nbaseline_uc = sim.calculate(\"universal_credit\", 2025).mean()\nreformed_uc = reformed_sim.calculate(\"universal_credit\", 2025).mean()\n\n# Calculate the difference to see the policy impact\ndifference = reformed_uc - baseline_uc\nprint(f\"Average UC increase: £{difference:.2f} per month\")","type":"content","url":"/simulations#simulating-policy-scenarios","position":9},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Working with families and children"},"type":"lvl2","url":"/simulations#working-with-families-and-children","position":10},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Working with families and children"},"content":"Family situations require more detailed setup:family_with_children = {\n    \"people\": {\n        \"parent\": {\n            \"age\": {2025: 35},\n            \"employment_income\": {2025: 28_000}\n        },\n        \"partner\": {\n            \"age\": {2025: 33},\n            \"employment_income\": {2025: 12_000}\n        },\n        \"child_1\": {\n            \"age\": {2025: 7}\n        },\n        \"child_2\": {\n            \"age\": {2025: 4}\n        }\n    },\n    \"benunits\": {\n        \"family\": {\n            \"members\": [\"parent\", \"partner\", \"child_1\", \"child_2\"]\n        }\n    },\n    \"households\": {\n        \"home\": {\n            \"members\": [\"parent\", \"partner\", \"child_1\", \"child_2\"],\n            \"housing_costs\": {2025: 9600},  # Annual housing costs\n            \"childcare_costs\": {2025: 7200}  # Annual childcare costs\n        }\n    }\n}\n\nfamily_sim = Simulation(situation=family_with_children)\n\n# Calculate family-specific benefits - these are per benefit unit (family)\nchild_benefit = family_sim.calculate(\"child_benefit\", 2025).mean()\nchildcare_support = family_sim.calculate(\"universal_credit_childcare\", 2025).mean()\n\nprint(f\"Child benefit: £{child_benefit:.2f} per month\")\nprint(f\"Childcare support: £{childcare_support:.2f} per month\")","type":"content","url":"/simulations#working-with-families-and-children","position":11},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Using different data sources"},"type":"lvl2","url":"/simulations#using-different-data-sources","position":12},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Using different data sources"},"content":"","type":"content","url":"/simulations#using-different-data-sources","position":13},{"hierarchy":{"lvl1":"Running simulations","lvl3":"From pandas DataFrames","lvl2":"Using different data sources"},"type":"lvl3","url":"/simulations#from-pandas-dataframes","position":14},{"hierarchy":{"lvl1":"Running simulations","lvl3":"From pandas DataFrames","lvl2":"Using different data sources"},"content":"If you have data in a DataFrame, convert it to the right format:import pandas as pd\n\n# Your data needs specific column naming\ndf = pd.DataFrame({\n    \"person_id__2025\": [1, 2, 3],\n    \"age__2025\": [25, 45, 65],\n    \"employment_income__2025\": [20000, 40000, 0],\n    \"state_pension__2025\": [0, 0, 180]  # Weekly pension\n})\n\n# Create simulation from the DataFrame\nsim_from_df = Simulation(dataset=df)\n# Calculate total income tax across all people in the dataset\ntotal_tax = sim_from_df.calculate(\"income_tax\", 2025).sum()\nprint(f\"Total income tax from all people: £{total_tax:.2f}\")\n\nThe column naming follows the pattern variable_name__year for time-varying variables.","type":"content","url":"/simulations#from-pandas-dataframes","position":15},{"hierarchy":{"lvl1":"Running simulations","lvl3":"From survey datasets","lvl2":"Using different data sources"},"type":"lvl3","url":"/simulations#from-survey-datasets","position":16},{"hierarchy":{"lvl1":"Running simulations","lvl3":"From survey datasets","lvl2":"Using different data sources"},"content":"For population-level analysis, use survey data:from policyengine_uk import Microsimulation\n\n# Load the Enhanced Family Resources Survey\nsim = Microsimulation(\n    dataset=\"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\"\n)\n\n# Calculate population totals using survey weights\n# This gives us an estimate for the entire UK population\ntotal_income_tax = sim.calculate(\"income_tax\", 2025).sum() / 1e9\nprint(f\"Total UK income tax revenue: £{total_income_tax:.1f}bn\")","type":"content","url":"/simulations#from-survey-datasets","position":17},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Microsimulation analysis"},"type":"lvl2","url":"/simulations#microsimulation-analysis","position":18},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Microsimulation analysis"},"content":"The Microsimulation class extends Simulation with survey weights for population estimates:from policyengine_uk import Microsimulation\n\n# Compare baseline and reform\nbaseline = Microsimulation(\n    dataset=\"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\"\n)\n\n# Create a scenario that increases the basic rate of income tax to 25%\nscenario = Scenario(parameter_changes={\n    \"gov.hmrc.income_tax.rates.uk[0].rate\": 0.25\n})\nreformed = Microsimulation(\n    dataset=\"hf://policyengine/policyengine-uk-data/enhanced_frs_2022_23.h5\",\n    scenario=scenario\n)\n\n# Calculate revenue impact by comparing household net incomes\n# When net income falls, government revenue increases\nbaseline_net = baseline.calculate(\"household_net_income\", 2025)\nreformed_net = reformed.calculate(\"household_net_income\", 2025)\n\n# The negative of the income change gives us the revenue change\nrevenue_change = -(reformed_net - baseline_net).sum() / 1e9\nprint(f\"Additional government revenue: £{revenue_change:.1f}bn\")\n\n# Analyse distributional impact by looking at poverty rates\n# in_poverty is a boolean variable, so mean() gives us the poverty rate\npoverty_baseline = baseline.calculate(\"in_poverty\", 2025).mean()\npoverty_reformed = reformed.calculate(\"in_poverty\", 2025).mean()\n\npoverty_change = poverty_reformed - poverty_baseline\nprint(f\"Poverty rate change: {poverty_change:.1%}\")","type":"content","url":"/simulations#microsimulation-analysis","position":19},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Advanced techniques"},"type":"lvl2","url":"/simulations#advanced-techniques","position":20},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Advanced techniques"},"content":"","type":"content","url":"/simulations#advanced-techniques","position":21},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Calculating multiple variables efficiently","lvl2":"Advanced techniques"},"type":"lvl3","url":"/simulations#calculating-multiple-variables-efficiently","position":22},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Calculating multiple variables efficiently","lvl2":"Advanced techniques"},"content":"Instead of calculating variables one by one, you can get multiple results at once using the built-in calculate_dataframe method:# Get multiple variables in a single DataFrame\nvariables = [\"employment_income\", \"income_tax\", \"universal_credit\", \"household_net_income\"]\nresults_df = sim.calculate_dataframe(variables, 2025)\n\n# This gives you a DataFrame with columns for each variable\nprint(results_df.head())\nprint(f\"Average net income: £{results_df['household_net_income'].mean():.2f}\")","type":"content","url":"/simulations#calculating-multiple-variables-efficiently","position":23},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Working with different time periods","lvl2":"Advanced techniques"},"type":"lvl3","url":"/simulations#working-with-different-time-periods","position":24},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Working with different time periods","lvl2":"Advanced techniques"},"content":"# Multi-year analysis to see how income changes over time\nyears = [2023, 2024, 2025]\nincome_by_year = {}\n\nfor year in years:\n    income_by_year[year] = sim.calculate(\"household_net_income\", year)\n\n# Compare average household income across years\nfor year in years:\n    avg_income = income_by_year[year].mean()\n    print(f\"{year}: £{avg_income/12:.2f} per month\")","type":"content","url":"/simulations#working-with-different-time-periods","position":25},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Mapping variables to different entities","lvl2":"Advanced techniques"},"type":"lvl3","url":"/simulations#mapping-variables-to-different-entities","position":26},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Mapping variables to different entities","lvl2":"Advanced techniques"},"content":"Some variables can be calculated at different levels:# Calculate employment income at different entity levels\n# Individual level - one value per person\nperson_income = sim.calculate(\"employment_income\", 2025)\nprint(f\"Average personal employment income: £{person_income.mean():.2f}\")\n\n# Household level - sums all employment income within each household\nhousehold_income = sim.calculate(\"employment_income\", 2025, map_to=\"household\")\nprint(f\"Average household employment income: £{household_income.mean():.2f}\")\n\n# Benefit unit level - sums employment income within each benefit unit (family)\nbenunit_income = sim.calculate(\"employment_income\", 2025, map_to=\"benunit\")\nprint(f\"Average benefit unit employment income: £{benunit_income.mean():.2f}\")","type":"content","url":"/simulations#mapping-variables-to-different-entities","position":27},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Using custom weights","lvl2":"Advanced techniques"},"type":"lvl3","url":"/simulations#using-custom-weights","position":28},{"hierarchy":{"lvl1":"Running simulations","lvl3":"Using custom weights","lvl2":"Advanced techniques"},"content":"For microsimulation with custom weights:# Access and modify survey weights for sensitivity analysis\nweights = sim.get_weights(\"income_tax\", 2025)\nmodified_weights = weights * 1.1  # Increase all weights by 10%\n\n# Calculate population total with modified weights\nunweighted_values = sim.calculate(\"income_tax\", 2025, use_weights=False)\nweighted_total = (unweighted_values * modified_weights).sum()\nprint(f\"Total with 10% higher weights: £{weighted_total/1e9:.1f}bn\")","type":"content","url":"/simulations#using-custom-weights","position":29},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Debugging simulations"},"type":"lvl2","url":"/simulations#debugging-simulations","position":30},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Debugging simulations"},"content":"When simulations don’t behave as expected:# Check individual components to understand the tax calculation\n# These help you trace through how income tax is calculated step by step\nemployment_income = sim.calculate(\"employment_income\", 2025).mean()\npersonal_allowance = sim.calculate(\"personal_allowance\", 2025).mean()\ntaxable_income = sim.calculate(\"adjusted_net_income\", 2025).mean()\nincome_tax = sim.calculate(\"income_tax\", 2025).mean()\n\nprint(f\"Employment income: £{employment_income:.2f}\")\nprint(f\"Personal allowance: £{personal_allowance:.2f}\")\nprint(f\"Taxable income: £{taxable_income:.2f}\")\nprint(f\"Income tax: £{income_tax:.2f}\")\n\n# Verify the household composition was interpreted correctly\navg_age = sim.calculate(\"age\", 2025).mean()\nchildren_per_household = sim.calculate(\"household_count_children\", 2025).mean()\nprint(f\"Average age: {avg_age:.1f} years\")\nprint(f\"Average children per household: {children_per_household:.1f}\")","type":"content","url":"/simulations#debugging-simulations","position":31},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Performance tips"},"type":"lvl2","url":"/simulations#performance-tips","position":32},{"hierarchy":{"lvl1":"Running simulations","lvl2":"Performance tips"},"content":"Use Microsimulation for population analysis, Simulation for household-level work\n\nCalculate multiple variables in batches rather than individually\n\nFor large datasets, consider calculating subsets first to verify your logic\n\nCache simulation results when running the same calculation multiple times\n\nThe simulation system is designed to be flexible and powerful. Start with simple examples and gradually build up to more complex analyses as you become familiar with the structure and capabilities.","type":"content","url":"/simulations#performance-tips","position":33},{"hierarchy":{"lvl1":"HBAI"},"type":"lvl1","url":"/hbai","position":0},{"hierarchy":{"lvl1":"HBAI"},"content":"PolicyEngine UK includes variables that match to the Households Below Average Income (HBAI) income concepts. These are:\n\nhbai_household_net_income: Household net income, before housing costs\n\nhbai_household_net_income_ahc: Household net income, after housing costs\n\nequiv_hbai_household_net_income: Equivalised household net income, before housing costs (BHC)\n\nequiv_hbai_household_net_income_ahc: Equivalised household net income, after housing costs (AHC)\n\nThese variables are used in the HBAI income distribution and poverty \n\nstatistics, which are published by the Department for Work and Pensions (DWP) in the UK. The HBAI income concepts are defined \n\nhere.\n\nThe table below shows how the HBAI income components map to PolicyEngine variables. The HBAI income definition is based on the income of all members of a household, and includes various sources of income, subtractions, and housing costs (for the AHC variant).\n\nHBAI component\n\nPolicyEngine variable/notes\n\nIncome\n\n\n\nUsual net earnings from employment\n\nemployment_income\n\nProfit or loss from self-employment (losses are treated as a negative income)\n\nself_employment_income\n\nIncome received from dividends (from FYE 2022)\n\ndividend_income\n\nState support - all benefits and tax credits\n\nhbai_benefits\n\nIncome from occupational and private pensions\n\nprivate_pension_income (includes occupational pension income)\n\nInvestment income\n\ndividend_income, savings_interest_income, property_income\n\nMaintenance payments\n\nmaintenance_income\n\nIncome from educational grants and scholarships (including, for students, student loans and parental contributions)\n\nstudent_payments\n\nThe cash value of certain forms of income in kind (free school meals, free school breakfast, free school milk, free school fruit and vegetables, Healthy Start vouchers and free TV licences for those aged 75 and over who receive Pension Credit)\n\nfree_school_meals, free_school_fruit_veg, free_school_milk, healthy_start_vouchers, free_tv_licence_value\n\nSubtractions\n\n\n\nIncome tax payments\n\nincome_tax\n\nNational Insurance contributions\n\nnational_insurance\n\nDomestic rates/council tax\n\ncouncil_tax and domestic_rates\n\nContributions to occupational pension schemes (including all additional voluntary contributions (AVCs) to occupational pension schemes, and any contributions to stakeholder and personal pensions)\n\nemployee_pension_contributions, personal_pension_contributions\n\nAll maintenance and child support payments, which are deducted from the income of the person making the payment\n\nmaintenance_expenses\n\nParental contributions to students living away from home\n\nexternal_child_payments\n\nStudent loan repayments\n\nstudent_loan_repayments\n\nHousing costs\n\n\n\nRent (gross of housing benefit)\n\nrent\n\nWater rates, community water charges and council water charges\n\nwater_and_sewerage_charges\n\nMortgage interest payments\n\nmortgage_interest_repayment\n\nStructural insurance premiums (for owner occupiers)\n\nstructural_insurance_payments\n\nGround rent and service charges\n\nhousing_service_charges","type":"content","url":"/hbai","position":1},{"hierarchy":{"lvl1":"HBAI","lvl2":"Nowcasting/forecasting"},"type":"lvl2","url":"/hbai#nowcasting-forecasting","position":2},{"hierarchy":{"lvl1":"HBAI","lvl2":"Nowcasting/forecasting"},"content":"Each of the variables above is either derived from other variables, or is a direct input variable. Direct input variables are uprated in future years according to economic indices, specified in the table below.\n\nVariable\n\nIndex\n\nNotes\n\nemployment_income\n\ngov.obr.per_capita.employment_income\n\nUprated based on OBR per capita employment income projections\n\nself_employment_income\n\ngov.obr.per_capita.mixed_income\n\nUprated based on OBR per capita mixed income projections\n\ndividend_income\n\ngov.economic_assumptions.indices.obr.per_capita.gdp\n\nUprated based on OBR per capita GDP projections\n\nhbai_benefits\n\nVarious\n\nDifferent benefits use different uprating indices, mostly gov.obr.consumer_price_index\n\nprivate_pension_income\n\ngov.obr.private_pension_index\n\nUprated based on OBR private pension index\n\nsavings_interest_income\n\ngov.economic_assumptions.indices.obr.per_capita.gdp\n\nUprated based on OBR per capita GDP projections\n\nproperty_income\n\ngov.economic_assumptions.indices.obr.per_capita.gdp\n\nUprated based on OBR per capita GDP projections\n\nmaintenance_income\n\ngov.economic_assumptions.indices.obr.per_capita.gdp\n\nUprated based on OBR per capita GDP projections\n\nstudent_payments\n\nNot uprated directly\n\nCurrently no specific uprating for student payments\n\nfree_school_meals\n\ngov.obr.consumer_price_index\n\nUprated based on CPI inflation\n\nfree_school_fruit_veg\n\ngov.obr.consumer_price_index\n\nUprated based on CPI inflation\n\nfree_school_milk\n\ngov.obr.consumer_price_index\n\nUprated based on CPI inflation\n\nfree_tv_licence_value\n\nNot directly uprated\n\nDepends on policy parameters\n\nincome_tax\n\nDerived\n\nCalculated based on income and tax policy\n\nnational_insurance\n\nDerived\n\nCalculated based on income and NI policy\n\ncouncil_tax\n\ngov.obr.council_tax\n\nUprated based on outturn CT levels by region growth to 2025, then OBR projections of levels by region onwardss\n\ndomestic_rates\n\ngov.obr.council_tax\n\nUprated with council tax as proxy\n\nemployee_pension_contributions\n\ngov.obr.per_capita.employment_income\n\nUprated based on per capita employment income growth\n\npersonal_pension_contributions\n\ngov.obr.per_capita.employment_income\n\nUprated based on per capita employment income growth\n\nmaintenance_expenses\n\ngov.obr.consumer_price_index\n\nUprated based on CPI inflation\n\nstudent_loan_repayments\n\ngov.economic_assumptions.indices.obr.average_earnings\n\nUprated based on OBR average earnings projections\n\nrent\n\ngov.obr.rent\n\nSocial rents uprated by CPI+1%, private rents uprated with outturn data by region to 2025, then with backed-out private rent level growth from OBR aggregate rent forecasts (assuming social rent grows at CPI+1%)\n\nwater_and_sewerage_charges\n\ngov.obr.consumer_price_index\n\nUprated based on CPI as proxy\n\nmortgage_interest_repayment\n\ngov.obr.mortgage_interest\n\nUprated based on outturn Ofwat data to 2025, then Ofwat projections onwards\n\nhousing_service_charges\n\ngov.obr.consumer_price_index\n\nUprated based on CPI as proxy","type":"content","url":"/hbai#nowcasting-forecasting","position":3}]}